# Order Service Configuration

# Quarkus Application Info
quarkus.application.name=order-service
quarkus.application.version=1.0.0-SNAPSHOT

# HTTP Port (optional, defaults to 8080)
quarkus.http.port=8081

# Database Configuration
quarkus.datasource.db-kind=postgresql
quarkus.datasource.jdbc.url=jdbc:postgresql://postgres.minikube.local:31000/postgres
quarkus.datasource.username=debezium
quarkus.datasource.password=dbz_password
quarkus.hibernate-orm.database.generation=validate
# quarkus.hibernate-orm.log.sql=true # Uncomment for debugging SQL

# Kafka Configuration (Common)
kafka.bootstrap.servers=kafka.minikube.local:31092

# Kafka Consumer Configuration (SmallRye Reactive Messaging)
# Consumer for Payment Events
mp.messaging.incoming.payment-events.connector=smallrye-kafka
mp.messaging.incoming.payment-events.topic=minikubepg_postgres.public.payments
mp.messaging.incoming.payment-events.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.payment-events.group.id=order-service-payments-group
mp.messaging.incoming.payment-events.auto.offset.reset=earliest
# mp.messaging.incoming.payment-events.failure-strategy=dead-letter-queue # Consider adding failure handling

# Consumer for Stock Reservation Events
mp.messaging.incoming.stock-events.connector=smallrye-kafka
mp.messaging.incoming.stock-events.topic=minikubepg_postgres.public.stock_reservations
mp.messaging.incoming.stock-events.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.stock-events.group.id=order-service-stock-group
mp.messaging.incoming.stock-events.auto.offset.reset=earliest
# mp.messaging.incoming.stock-events.failure-strategy=dead-letter-queue # Consider adding failure handling

# Jackson configuration (optional, if specific settings are needed)
# quarkus.jackson.fail-on-unknown-properties=false
